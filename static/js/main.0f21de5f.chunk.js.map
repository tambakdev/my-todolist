{"version":3,"sources":["containers/pages/Todo/forms/AddListForm.js","containers/pages/Todo/forms/EditListForm.js","containers/pages/Todo/tables/ListTable.js","containers/pages/Todo/index.js","serviceWorker.js","index.js"],"names":["AddListForm","props","initialFormState","id","description","created_at","due_date","useState","list","setList","handleInputChange","event","target","name","value","onSubmit","preventDefault","addList","className","placeholder","style","minHeight","onChange","type","onClick","closeModal","EditListForm","currentList","useEffect","updateList","ListTable","lists","length","map","key","checkedList","editRow","deleteList","colSpan","align","Todo","setLists","setCurrentList","editing","setEditing","showModal","setShow","buttonDelete","setButton","updatedList","console","log","Date","toISOString","slice","filter","alert","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4KAiEeA,EA/DK,SAACC,GACnB,IAAMC,EAAmB,CACvBC,GAAI,KACJC,YAAa,GACbC,WAAY,GACZC,SAAU,IALiB,EAOLC,mBAASL,GAPJ,mBAOtBM,EAPsB,KAOhBC,EAPgB,KASvBC,EAAoB,SAACC,GAAW,IAAD,EACXA,EAAMC,OAAtBC,EAD2B,EAC3BA,KAAMC,EADqB,EACrBA,MAEdL,EAAQ,eAAKD,EAAN,eAAaK,EAAOC,MAQ7B,OACE,0BACEC,SAAU,SAACJ,GACTA,EAAMK,iBACDR,EAAKJ,aAAgBI,EAAKF,WAEjCL,EAAMgB,QAAQT,GACVC,EAAQP,MAGZ,8CACA,8BACEgB,UAAU,aACVC,YAAY,uBACZC,MAAO,CAACC,UAAW,QACnBR,KAAK,cACLC,MAAON,EAAKJ,YACZkB,SAAUZ,IAEZ,2CACA,2BACEQ,UAAU,QACVK,KAAK,OACLV,KAAK,WACLC,MAAON,EAAKF,SACZgB,SAAUZ,IAEf,4BACGa,KAAK,SACLL,UAAU,wBACVM,QAnCiB,WACpBvB,EAAMwB,aACNhB,EAAQP,KA8BR,UAOA,4BACEgB,UAAU,uCADZ,UCDYQ,EArDM,SAACzB,GAAW,IAAD,EACNM,mBAASN,EAAM0B,aADT,mBACvBnB,EADuB,KACjBC,EADiB,KAG9BmB,qBAAU,WACRnB,EAAQR,EAAM0B,eACb,CAAC1B,IAEJ,IAAMS,EAAoB,SAACC,GAAW,IAAD,EACXA,EAAMC,OAAtBC,EAD2B,EAC3BA,KAAMC,EADqB,EACrBA,MAEdL,EAAQ,eAAKD,EAAN,eAAaK,EAAOC,MAG7B,OACE,0BACEC,SAAU,SAACJ,GACTA,EAAMK,iBAENf,EAAM4B,WAAWrB,EAAKL,GAAIK,KAG5B,8CACA,8BACEU,UAAU,aACVC,YAAY,uBACZC,MAAO,CAAEC,UAAW,QACpBR,KAAK,cACLC,MAAON,EAAKJ,YACZkB,SAAUZ,IAEZ,2CACA,2BACEQ,UAAU,QACVK,KAAK,OACLV,KAAK,WACLC,MAAON,EAAKF,SACZgB,SAAUZ,IAEZ,4BACEa,KAAK,SACLL,UAAU,yBAFZ,UAMA,4BACEA,UAAU,uCADZ,YCMSY,EAlDG,SAAC7B,GAAD,OAChB,2BAAOiB,UAAU,sBACf,+BACE,4BACE,iCACA,2CACA,0CACA,wCACA,+BAGJ,+BACGjB,EAAM8B,MAAMC,OAAS,EACpB/B,EAAM8B,MAAME,KAAI,SAACzB,GAAD,OACd,wBAAI0B,IAAK1B,EAAKL,IACZ,4BAAKK,EAAKL,IACV,4BAAKK,EAAKJ,aACV,4BAAKI,EAAKH,YACV,4BAAKG,EAAKF,UACV,4BACE,2BAAOO,KAAML,EAAKL,GAClBmB,SAAU,kBAAMrB,EAAMkC,YAAY3B,EAAKL,KACvCoB,KAAK,aAEL,4BACEC,QAAS,WACPvB,EAAMmC,QAAQ5B,IAEhBU,UAAU,UAJZ,QAQA,4BACEM,QAAS,kBAAMvB,EAAMoC,WAAW7B,EAAKL,KACrCe,UAAU,UAFZ,eAUN,4BACE,wBAAIoB,QAAS,EAAGC,MAAM,UAAtB,gBCmGKC,EA3IF,WAEX,IAFiB,EAwBSjC,mBAtBT,CACf,CACEJ,GAAI,EACJC,YAAa,QACbC,WAAY,aACZC,SAAU,cAEZ,CACEH,GAAI,EACJC,YAAa,YACbC,WAAY,aACZC,SAAU,gBAbG,mBAwBVyB,EAxBU,KAwBHU,EAxBG,OAyBqBlC,mBARb,CACvBJ,GAAI,KACJC,YAAa,GACbC,WAAY,GACZC,SAAU,KArBK,mBAyBVqB,EAzBU,KAyBGe,EAzBH,OA0BanC,oBAAS,GA1BtB,mBA0BVoC,EA1BU,KA0BDC,EA1BC,OA0DYrC,qBA1DZ,mBA0DVsC,EA1DU,KA0DCC,EA1DD,OAgEiBvC,qBAhEjB,mBAgEVwC,EAhEU,KAgEIC,EAhEJ,KAwEjB,OACE,yBAAK9B,UAAU,aACb,yBAAKA,UAAW2B,EAAY,kBAAoB,SAC9C,yBAAK3B,UAAU,qBACf,yBAAKA,UAAU,cACZyB,EACC,kBAAC,WAAD,KACE,4BAAQzB,UAAU,mBAChB,uBAAGA,UAAU,oBAAb,mBAEF,6BAASA,UAAU,mBACjB,kBAAC,EAAD,CACEyB,QAASA,EACTC,WAAYA,EACZjB,YAAaA,EACbE,WA/CG,SAAC1B,EAAI8C,GACtBL,GAAW,GACXH,EAASV,EAAME,KAAI,SAACzB,GAAD,OAAWA,EAAKL,KAAOA,EAAK8C,EAAczC,MAC7DsC,GAAQ,QAiDA,kBAAC,WAAD,KACE,4BAAQ5B,UAAU,mBAChB,uBAAGA,UAAU,oBAAb,wBAEF,6BAASA,UAAU,mBACjB,kBAAC,EAAD,CACEO,WAvCG,WAClBqB,GAAQ,GACRI,QAAQC,IAAIN,IAsCG5B,QAvEA,SAACT,GACfA,EAAKL,GAAK4B,EAAMC,OAAS,EACzBxB,EAAKH,YAAa,IAAI+C,MAAOC,cAAcC,MAAM,EAAG,IACpDb,EAAS,GAAD,mBAAKV,GAAL,CAAYvB,KACpBsC,GAAQ,UA2EN,wBAAI5B,UAAU,aAAd,mBACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,QACb,kBAAC,EAAD,CACEa,MAAOA,EACPK,QAjEM,SAAC5B,GAClBoC,GAAW,GACRE,GAAQ,GACRJ,EAAe,CACbvC,GAAIK,EAAKL,GACTC,YAAaI,EAAKJ,YAClBC,WAAYG,EAAKH,WACjBC,SAAUE,EAAKF,YA2DT+B,WA9ES,SAAClC,GAClByC,GAAW,GACXH,EAASV,EAAMwB,QAAO,SAAC/C,GAAD,OAAUA,EAAKL,KAAOA,OA6EpCgC,YAjDU,SAAChC,GACpBqD,MAAMrD,GACN6C,GAAU,GACVE,QAAQC,IAAIJ,OAiDP,yBAAK7B,UAAU,gBACb,yBAAKA,UAAU,UACb,4BAAQA,UAAU,iBAAiBM,QAAS,kBAAMsB,GAAQ,KAA1D,QAIF,yBAAK5B,UAAU,UACb,4BAAQA,UAAU,iBAAiBuC,UAAQ,GAA3C,SAIF,yBAAKvC,UAAU,UACb,4BAAQA,UAAU,mCAAmCuC,UAAQ,GAA7D,eC1HQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.0f21de5f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst AddListForm = (props) => {\n  const initialFormState = {\n    id: null,\n    description: \"\",\n    created_at: \"\",\n    due_date: \"\",\n  };\n  const [list, setList] = useState(initialFormState);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setList({ ...list, [name]: value });\n  };\n\n  const handleCancel = () => {\n\t  props.closeModal()\n\t  setList(initialFormState)\n  }\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        if (!list.description || !list.due_date) return;\n\n      props.addList(list);\n          setList(initialFormState);\n        }}\n    >\n      <label>Description</label>\n      <textarea\n        className=\"input mb-5\"\n        placeholder=\"Write your todo here\"\n        style={{minHeight: \"70px\"}}\n        name=\"description\"\n        value={list.description}\n        onChange={handleInputChange} \n      />\n      <label>Due Date</label>\n      <input\n        className=\"input\"\n        type=\"date\"\n        name=\"due_date\"\n        value={list.due_date}\n        onChange={handleInputChange}\n      />\n\t  <button \n      type=\"button\"\n      className=\"button is-danger mt-2\"\n      onClick={handleCancel}\n    >\n      Cancel\n    </button>\n\t  <button \n\t    className=\"button is-info is-pulled-right mt-2\"\n\t  >\n\t\t  Save\n\t  </button>\n    </form>\n  );\n};\n\nexport default AddListForm;\n","import React, { useState, useEffect } from \"react\";\n\nconst EditListForm = (props) => {\n  const [list, setList] = useState(props.currentList);\n\n  useEffect(() => {\n    setList(props.currentList);\n  }, [props]);\n  \n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n\n    setList({ ...list, [name]: value });\n  };\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        props.updateList(list.id, list);\n      }}\n    >\n      <label>Description</label>\n      <textarea\n        className=\"input mb-5\"\n        placeholder=\"Write your todo here\"\n        style={{ minHeight: \"70px\" }}\n        name=\"description\"\n        value={list.description}\n        onChange={handleInputChange}\n      />\n      <label>Due Date</label>\n      <input\n        className=\"input\"\n        type=\"date\"\n        name=\"due_date\"\n        value={list.due_date}\n        onChange={handleInputChange}\n      />\n      <button\n        type=\"button\"\n        className=\"button is-danger mt-2\"\n      >\n        Cancel\n      </button>\n      <button \n        className=\"button is-info is-pulled-right mt-2\"\n      >\n        Update\n      </button>\n    </form>\n  );\n};\n\nexport default EditListForm;\n","import React from \"react\";\n\nconst ListTable = (props) => (\n  <table className=\"table is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>Description</th>\n        <th>Created At</th>\n        <th>Due Date</th>\n        <th></th>\n      </tr>\n    </thead>\n    <tbody>\n      {props.lists.length > 0 ? (\n        props.lists.map((list) => (\n          <tr key={list.id}>\n            <th>{list.id}</th>\n            <td>{list.description}</td>\n            <td>{list.created_at}</td>\n            <td>{list.due_date}</td>\n            <td>\n              <input name={list.id} \n              onChange={() => props.checkedList(list.id)} \n              type=\"checkbox\" />\n\n              <button\n                onClick={() => {\n                  props.editRow(list)                  \n                }}\n                className=\"button\"\n              >\n                Edit\n              </button>\n              <button\n                onClick={() => props.deleteList(list.id)}\n                className=\"button\"\n              >\n                Delete\n              </button>\n            </td>\n          </tr>\n        ))\n      ) : (\n        <tr>\n          <td colSpan={4} align=\"center\">No lists</td>\n        </tr>\n      )}\n    </tbody>\n  </table>\n);\n\nexport default ListTable;\n","import React, { useState, Fragment } from \"react\";\nimport AddListForm from \"./forms/AddListForm\";\nimport EditListForm from \"./forms/EditListForm\";\nimport ListTable from \"./tables/ListTable\";\n\nconst Todo = () => {\n\t\n  const listData = [\n    {\n      id: 1,\n      description: \"Login\",\n      created_at: \"2020-10-20\",\n      due_date: \"2020-10-21\",\n    },\n    {\n      id: 2,\n      description: \"Dashboard\",\n      created_at: \"2020-10-20\",\n      due_date: \"2020-10-21\",\n    },\n  ];\n\n  const initialFormState = {\n    id: null,\n    description: \"\",\n    created_at: \"\",\n    due_date: \"\",\n  };\n\n  const [lists, setLists] = useState(listData);\n  const [currentList, setCurrentList] = useState(initialFormState);\n  const [editing, setEditing] = useState(false);\n\n  const addList = (list) => {\n    list.id = lists.length + 1;\n    list.created_at = new Date().toISOString().slice(0, 10);\n    setLists([...lists, list]);\n    setShow(false);\n  };\n\n  const deleteList = (id) => {\n    setEditing(false);\n    setLists(lists.filter((list) => list.id !== id));\n  };\n\n  const updateList = (id, updatedList) => {\n    setEditing(false);\n    setLists(lists.map((list) => (list.id === id ? updatedList : list)));\n    setShow(false);\n  };\n\n\n  const editRow = (list) => {\n\tsetEditing(true);\n    setShow(true);\n    setCurrentList({ \n      id: list.id, \n      description: list.description, \n      created_at: list.created_at, \n      due_date: list.due_date \n    });\n  };\n\n  const [showModal, setShow] = useState();\n  const closeModal = () => {\n\t  setShow(false);\n\t  console.log(showModal)\n  };\n\n  const [buttonDelete, setButton] = useState();\n  const checkedList = (id) => {\n\t  alert(id);\n\t  setButton(false);\n\t  console.log(buttonDelete);\n  };\n\n  \n  return (\n    <div className=\"container\">\n      <div className={showModal ? \"modal is-active\" : \"modal\"}>\n        <div className=\"modal-background\"></div>\n        <div className=\"modal-card\">\n          {editing ? (\n            <Fragment>\n              <header className=\"modal-card-head\">\n                <p className=\"modal-card-title\">Edit Todo Item</p>\n              </header>\n              <section className=\"modal-card-body\">\n                <EditListForm\n                  editing={editing}\n                  setEditing={setEditing}\n                  currentList={currentList}\n                  updateList={updateList}\n                />\n              </section>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <header className=\"modal-card-head\">\n                <p className=\"modal-card-title\">Add a New Todo Item</p>\n              </header>\n              <section className=\"modal-card-body\">\n                <AddListForm \n                  closeModal={closeModal} \n                  addList={addList} \n                />\n              </section>\n            </Fragment>\n          )}\n        </div>\n      </div>\n\n      <h1 className=\"is-size-1\">Your Todo Lists</h1>\n      <div className=\"flex-row\">\n        <div className=\"mt-5\">\n          <ListTable\n            lists={lists} \n            editRow={editRow} \n            deleteList={deleteList} \n            checkedList={checkedList}\n          />\n        </div>\n        <div className=\"columns mt-5\">\n          <div className=\"column\">\n            <button className=\"button is-info\" onClick={() => setShow(true)}>\n              ADD\n            </button>\n          </div>\n          <div className=\"column\">\n            <button className=\"button is-dark\" disabled>\n              EDIT\n            </button>\n          </div>\n          <div className=\"column\">\n            <button className=\"button is-danger is-pulled-right\" disabled>\n              DELETE\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Todo;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Todo from './containers/pages/Todo';\nimport * as serviceWorker from './serviceWorker';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Todo />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}